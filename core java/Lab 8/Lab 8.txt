8.1: Write a program to read content from file, reverse the content and write the reversed content to the file. (Use Reader and Writer APIs).
package anurag;

import java.io.FileReader;
public class Number8
{
	   public static void main(String[] args)
	     {
	       try
	       {
	         FileReader fr = new FileReader("F:/cap/karthik.txt");
	         String str = "";
	         int ch;
	         while ((ch = fr.read()) != -1)
	         {
	        	 str += Character.toString((char) ch);
	         }
	         System.out.println("Original String : " + str);
	         StringBuilder sb = new StringBuilder(str);
	         System.out.println("Reverse order : " + sb.reverse());
	         fr.close();
	       }
	         catch(Exception e)
	       {
	             System.out.println("error"+e.getMessage());
	       }
	     }
}

8.2: Create a file named as “numbers.txt” which should contain numbers from 0 to 10 delimited by comma. Write a program to read data from numbers.txt using Scanner class API and display only even numbers in the console
package anurag;

import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
public class Lab8_2 {

	public static void main(String[] args) throws IOException
	{
		FileReader fr = new FileReader("F:/cap/numbers.txt"); 
			  Scanner sc=new Scanner(fr);
			  while(sc.hasNext())
			  {
				  String str=sc.nextLine();
				  System.out.println(str);
				  String[] s=str.split(",");
				  int i=s.length;
				     int k[]=new int[i];
				     int j;
				     for(j=0;j<i;j++)
				     {
				    	 k[j]=Integer.parseInt(s[j]);
				    	 
				     }
				  //   System.out.println("Integer array:"+Arrays.toString(k));
				     System.out.println("even numbers:");
				     for(j=0;j<i;j++)
				     if(k[j]%2==0)
			    	 {
			    		 System.out.println(k[j]);
			    	 }
			  }
			  sc.close();     
	}
}
8.3: Enhance the lab assignment 6.3 by adding functionality in service class to write employee objects into a File. Also read employee details from file and display the same in console. Analyze the output of the program
package anurag;

import java.io.Serializable;

public class Employee implements Serializable{
	private int id;
	private String name;
	private double sal;
	private String designation;
	private String insurancescheme;
	
	Employee()
	{	
		id=101;
		name="karthik";
		sal=30000.0;
		designation="clerk";
		insurancescheme="no scheme";
		
	}
	Employee(int id, String name,double sal)
	{
		this.id=id;
		this.name=name;
		this.sal=sal;
		
	}
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getSal() {
		return sal;
	}

	public void setSal(double sal) {
		this.sal = sal;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}
	public String getInsurancescheme() {
		return insurancescheme;
	}
	public void setInsurancescheme(String ischeme) {
		this.insurancescheme = ischeme;
	}
	public void insurancescheme()
	{
		if(sal==0)
		{
			System.out.println("salary should not be empty");
		}
		else
		{
			if(sal>5000 && sal< 20000 )
			{
				setDesignation("System Associate");
				setInsurancescheme("Scheme C");
			}
			else if(sal>=20000 &&sal<40000)
			{
				setDesignation("Programmer");
				setInsurancescheme("Scheme B");
			}
			else if(sal>=40000)
			{
				setDesignation("Manager");
				setInsurancescheme("Scheme A");
			}
			else if(sal<5000)
			{
				setDesignation("clerk");
				setInsurancescheme("No Scheme");
			}
		}
	}
	
	
}


package anurag;

import java.io.*;

public class Objectfile8_3 {

	public static void main(String[] args)  throws Exception{
		
		       Objectfile8_3 objectIO = new Objectfile8_3();
		       Employee e = new Employee();
		       e.setId(1);
		       e.setName("karthik");
		       e.setSal(25000);
		       e.setDesignation("manager");
		       e.setInsurancescheme("A");
		       objectIO.WriteObjectToFile(e);
		      // System.out.println(e.toString());
		       objectIO.file1();
		      
		    }
		 
		    public  void WriteObjectToFile(Object emp) {
		 
		        try {
		 
		            FileOutputStream fileOut = new FileOutputStream("F://objectfile.txt");
		            ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
		            objectOut.writeObject(emp);
		            objectOut.close();
		          
		            System.out.println("The Object  was succesfully written to a file");
		 
		        } catch (Exception ex) {
		            ex.printStackTrace();
		        }
		    }
		    
		    public void file1() throws Exception
		    {
		    	File f=new File("F://objectfile.txt");
		    	FileInputStream fr =new FileInputStream(f);
		    	ObjectInputStream ois=new ObjectInputStream(fr);
		    	//Employee emp= (Employee) new Employee();
		    	System.out.println(ois.readObject());
		    	
		    	
		    	/*int ch;
		    	while((ch=fr.read())!=-1)
		    	{
		    		System.out.print((char) ch);
		    	}*/
		    	
		    	
		    }
	}

